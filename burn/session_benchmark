#!/usr/bin/env ruby

require 'benchmark'
require 'rubygems'

gem 'data_objects', '=0.9.12'
gem 'dm-core', '=0.9.11'

require 'pathname'
require Pathname(__FILE__).dirname.parent + 'lib/harbor'

require 'do_sqlite3'
require 'json'
require 'yaml'

require 'harbor/test/request'
require 'harbor/contrib/session/data_mapper'
require 'harbor/contrib/session/data_objects'


@n = ARGV[0] ? ARGV[0].to_i : 10

@datamapper_db = "#{Pathname(__FILE__).dirname.expand_path}/benchmark_dm.db"
@do_marshal_db = "#{Pathname(__FILE__).dirname.expand_path}/benchmark_do_marshal.db"
@do_json_db = "#{Pathname(__FILE__).dirname.expand_path}/benchmark_do_json.db"
@do_yaml_db = "#{Pathname(__FILE__).dirname.expand_path}/benchmark_do_yaml.db"

# Options: :cookie, :dm, :do, :do_json, :do_yaml
test_to_run = ARGV[1] ? ARGV[1].to_sym : :cookie

test_names = {:cookie => 'Cookie', :dm => 'DataMapper', :do => 'DataObjects (Marshal)', :do_yaml => 'DataObjects (YAML)', :do_json => 'DataObjects (JSON)'}

###################### SETUP CODE ######################

def setup_cookie
  Harbor::Session.configure do |session|
    session[:store] = Harbor::Session::Cookie
  end
end

def setup_dm
  `rm -f #{@datamapper_db}`
  
  DataMapper.setup :default, "sqlite3://#{@datamapper_db}"
  DataMapper.auto_migrate!
  
  Harbor::Session.configure do |session|
    session[:store] = Harbor::Contrib::Session::DataMapper
  end
end

def setup_do
  `rm -f #{@do_marshal_db}`
    
  Harbor::Contrib::Session::DataObjects.instance_eval do
    @table_exists = nil
    
    def self.dump(data)
      Marshal.dump(data)
    end
    
    def self.load(data)
      Marshal.load(data)
    end
  end
      
  Harbor::Session.configure do |session|
    session[:store] = Harbor::Contrib::Session::DataObjects
    session[:connection_uri] = "sqlite3://#{@do_marshal_db}"
  end
  
  Harbor::Contrib::Session::DataObjects.create_session_table
end

def setup_do_yaml
  `rm -f #{@do_yaml_db}`
    
  Harbor::Contrib::Session::DataObjects.instance_eval do
    @table_exists = nil
    
    def self.dump(value)
      YAML::dump value
    end
    
    def self.load(value)
      YAML::load value
    end
  end
  
  Harbor::Session.configure do |session|
    session[:store] = Harbor::Contrib::Session::DataObjects
    session[:connection_uri] = "sqlite3://#{@do_yaml_db}"
  end
  
  Harbor::Contrib::Session::DataObjects.create_session_table
end

def setup_do_json
  `rm -f #{@do_json_db}`
    
  Harbor::Contrib::Session::DataObjects.instance_eval do
    @table_exists = nil
    
    def self.dump(value)
      value.to_json
    end
    
    def self.load(value)
      JSON.parse(value, :symbolize_names => true, :create_additions => false)
    end
  end
  
  Harbor::Session.configure do |session|
    session[:store] = Harbor::Contrib::Session::DataObjects
    session[:connection_uri] = "sqlite3://#{@do_json_db}"
  end
  
  Harbor::Contrib::Session::DataObjects.create_session_table
end

###################### TESTS ######################

CookieRequest = Class.new(Harbor::Test::Request) do
  def cookies
    @cookies ||= {}
  end
end

def read_test  
  session = Harbor::Session.new(Harbor::Test::Request.new)
  session[:user_id] = 1
  session[:name] = 'Jimi Hendrix'
  session.save
    
  request = CookieRequest.new
  request.cookies["harbor.session"] = session[:session_id]

  for i in 1..@n
    request_session = Harbor::Session.new(request)
    request_session[:user_id]
    request_session[:name]
  end
end

def read_uid_only_test  
  session = Harbor::Session.new(Harbor::Test::Request.new)
  session[:user_id] = 1
  session.save
    
  request = CookieRequest.new
  request.cookies["harbor.session"] = session[:session_id]

  for i in 1..@n
    request_session = Harbor::Session.new(request)
    request_session[:user_id]
  end
end

def write_test
  for i in 1..@n    
    session = Harbor::Session.new(Harbor::Test::Request.new)
    
    session.save
    
    session[:user_id] = i
    session[:user_name] = "user #{i}"
    
    session.save
    
    session[:user_name] = "user #{i+50}"
    
    session.save
  end  
end

###################### BENCHMARKS ######################

puts '---------------------------------------------------------------------------'
puts "-- N = #{@n}"
puts '---------------------------------------------------------------------------'

puts '************ Write test ************'
Benchmark.bm(30) do |b|
  send("setup_#{test_to_run}")
  
  b.report("#{test_names[test_to_run]}:") do
    write_test
  end
end

puts "\n************ Read test ************"
Benchmark.bm(30) do |b|
  send("setup_#{test_to_run}")
  
  b.report("#{test_names[test_to_run]}:") do
    read_test
  end
end

puts "\n************ Read user_id only test ************"
Benchmark.bm(30) do |b|
  send("setup_#{test_to_run}")
  
  b.report("#{test_names[test_to_run]}:") do
    read_uid_only_test
  end
end
